[{"id":"df88dddf.9c8b7","type":"tab","label":"InfluxDB 2.0","disabled":false,"info":""},{"id":"972b9bf4.c533e8","type":"inject","z":"df88dddf.9c8b7","name":"Inject every second","repeat":"3","crontab":"","once":false,"onceDelay":"0.1","topic":"","payload":"","payloadType":"date","x":660,"y":80,"wires":[["a063f274.1a5d8"]]},{"id":"26ae9806.e9ede8","type":"comment","z":"df88dddf.9c8b7","name":"Get Sensor Data","info":"","x":100,"y":40,"wires":[]},{"id":"44c427eb.3e3578","type":"comment","z":"df88dddf.9c8b7","name":"Interpret Sensor Data","info":"https://run.mocky.io/v3/b4b2d93d-896c-4d37-b019-5228a61e2338\n\n\nhttps://run.mocky.io/v3/a70af699-0e98-4fe0-9142-7e4c0618f3fb\n\n\nhttps://run.mocky.io/v3/3bb9ba80-d57a-4200-a80b-72d37021e190","x":340,"y":40,"wires":[]},{"id":"2f824a9c.a20656","type":"comment","z":"df88dddf.9c8b7","name":"Send to InfluxDB 2.0","info":"","x":650,"y":40,"wires":[]},{"id":"d2970633.554248","type":"function","z":"df88dddf.9c8b7","name":"Split Topic","func":"// Authored by Martin Hannah & Michael Thompson\n// Last updated by Michael Thompson on 19/2/21\n// split the topic into two parts\nvar parts = msg.topic.split('/');\nvar topic = '';\nvar base = '';\nvar n    = 0;\nfor (var i of parts) {\n    if (n > 1) \n        topic = topic + i ;\n        if (i !== parts.length[i]) \n            topic = topic + '/';\n    n++;\n}\nbase = parts[0] + '/' + parts[1] + '/' ;\nmsg.path = base;\nmsg.topic = topic.substring(2,topic.length - 1);\n\nconst invalidDG = [\"SensorGroup\", \"true\", \"String\", \"undefined\"];\n// Update Device-Group Pairs\nconst DGpairs = flow.get(\"DGpairs\") || {};\nif (msg.topic.indexOf('SensorGroup') != -1 && !(invalidDG.includes(msg.payload))) \n    DGpairs[base] = msg.payload;\n\nflow.set(\"DGpairs\", DGpairs);\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":100,"wires":[["50e9b1b6.a0a54","46b2939d.22869c","f221c6dd.4f2208"]]},{"id":"50e9b1b6.a0a54","type":"function","z":"df88dddf.9c8b7","name":"Update Topic Flow Variable ","func":"// Authored by Michael Thompson on 30/12/2020\n// Last updated by Michael Thompson on 19/2/2021\n\n// Updates flow array containing all topics\n// May or may not be necessary // \n/*\nconst topicArray = flow.get(\"topicArray\") || [];\nif ((topicArray.includes(msg.topic))===false)\n    topicArray.push(msg.topic);\nflow.set(\"topicArray\", topicArray); */\n\n// Find group that matches the device, or if none is found it is ungrouped\nDGpairs = flow.get(\"DGpairs\");\ndevice = msg.path;\n\ngroup = DGpairs[device];\n\nvar topic = msg.topic;\n\n// Updates flow variable containing devices\nconst devices = flow.get(\"devices\") || [];\nif (!(devices.includes(device)) && group !== undefined)\n    devices.push(device);\nflow.set(\"devices\", devices);\n\n// Updates flow variable containing topics within current device\nconst deviceArray = flow.get(device+\"Array\") || [];//flow.get(device+\"Array\") ||\nif (!(deviceArray.includes(topic)) && !topic.includes(\"$\") && group !== undefined)\n    deviceArray.push(topic);\nflow.set(device+\"Array\",deviceArray);\nmsg.array = deviceArray;\n\n// Updates flow variable containing datatypes for each topic\nconst typeDict = flow.get(\"typeDict\") || {};\nif (topic.includes(\"$datatype\"))\n    // Assigns datatype to dict entry of topic name (ie without \"/$datatype\" suffix)\n    typeDict[topic.substring(0, topic.indexOf(\"/$datatype\"))] = msg.payload;\nflow.set(\"typeDict\", typeDict);\n\n// Updates flow variable for current group and topic\nif (!(topic.includes(\"$datatype\") || topic.includes(\"SensorGroup\")) && \ntypeDict[topic] !== undefined  && group !== undefined) { \n    type = typeDict[topic];\n    if (type == \"float\")\n        value = parseFloat(msg.payload);\n    else if (type == \"integer\" || type == \"boolean\")\n        value = Number(msg.payload);\n    // Quotes added to specify string in line protocol\n    else value = '\"' +String(msg.payload)+ '\"';\n    \n    flow.set(device+topic,\n            {\"value\":value,\n            // Bool for if data is new\n             //\"new\":true\n            });\n            \n}\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":400,"y":140,"wires":[[]]},{"id":"96350029.01b8","type":"mqtt in","z":"df88dddf.9c8b7","name":"ESP","topic":"cyper/#","qos":"1","datatype":"auto","broker":"a0a384b2.b52d18","nl":false,"rap":false,"x":70,"y":80,"wires":[["d2970633.554248","ca7cc4f2.e776c8"]]},{"id":"806b368d.ef5d78","type":"comment","z":"df88dddf.9c8b7","name":"Diagnostic: Check for Invalid Code","info":"","x":1340,"y":180,"wires":[]},{"id":"9b07e31b.18b58","type":"comment","z":"df88dddf.9c8b7","name":"Diagnostic: Check for Invalid Code","info":"","x":1340,"y":220,"wires":[]},{"id":"b29fdf54.336ec","type":"comment","z":"df88dddf.9c8b7","name":"Lachlan Suggestions","info":"","x":1320,"y":120,"wires":[]},{"id":"46fb60df.7f958","type":"change","z":"df88dddf.9c8b7","name":"Get Timestamp","rules":[{"t":"set","p":"timestamp","pt":"msg","to":"payload","tot":"msg"}],"action":"","property":"","from":"","to":"","reg":false,"x":1280,"y":320,"wires":[[]]},{"id":"60bf4d2a.5651b4","type":"comment","z":"df88dddf.9c8b7","name":"Get a Timestamp Change Prototype","info":"","x":1340,"y":280,"wires":[]},{"id":"426ce4c9.0f471c","type":"function","z":"df88dddf.9c8b7","name":"Reset DGpairs & devices","func":"flow.set(\"DGpairs\", {});\nvar devices = flow.get(\"devices\");\nfor (var device in devices)\n    flow.set(device+\"Array\", [])\n\n\n\nflow.set(\"devices\",[]);\n\n//flow.set(devices[0]+\"Array\", [])\n\n\nflow.set(\"topicArray\",[])\n\nflow.set(\"unitDict\", {})\nflow.set(\"typeDict\", {})","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":330,"y":460,"wires":[[]]},{"id":"2ad41dcf.fefab2","type":"inject","z":"df88dddf.9c8b7","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":100,"y":460,"wires":[["426ce4c9.0f471c","69a395d6.87d6dc"]]},{"id":"b36ac3f3.a06de","type":"comment","z":"df88dddf.9c8b7","name":"Diagnostics","info":"","x":90,"y":400,"wires":[]},{"id":"a063f274.1a5d8","type":"array-loop","z":"df88dddf.9c8b7","name":"Loop over Devices","key":"index","keyType":"msg","reset":false,"resetValue":"value-null","array":"devices","arrayType":"flow","x":650,"y":140,"wires":[[],["6ec07626.a65c38"]]},{"id":"6ec07626.a65c38","type":"function","z":"df88dddf.9c8b7","name":"Send New Device Data","func":"// Authored by Michael Thompson on 29/12/2020\n// Last updated by Michael Thompson on 5/1/2021\nvar device = msg.payload;\nvar DGpairs = flow.get(\"DGpairs\");\n\n// Get group from device in GDpairs\ngroup = flow.get(\"DGpairs\")[device];\nmsg.device = device;\nmsg.group = group;\n\n\n// Array of Sensor Values\ndeviceArr = flow.get(device+\"Array\");\n\n\n\n// InfluxDB measurement set to group name as defined by loop over groups array\nmsg.measurement = flow.get(\"DGpairs\")[device];\n\n// For each sensor value, if the value is not set to \"undefined\" and contains new data, it is updated\n// in the JSON object\nvar send = false;\n\n// 11/2/21 Lachlan: Prototype ( +\" \"+Date.now()/1000 )\n// Code sourced from \n// https://www.toptal.com/software/definitive-guide-to-datetime-manipulation Punit Jajodia\nconst currentDate = new Date();\nconst timestamp = currentDate.getTime();\n\ndata = \"\";\n//data += \"\\n\"+group+\",host=\"+device+\" \"+\"mcu/execlog\"+\"=\"+flow.get(device+\"mcu/execlog\")[\"value\"]+\" \"+timestamp;\nfor (var topic of deviceArr) \n    if (flow.get(device+topic) !== undefined ) { //&& !isNaN(flow.get(device+topic)[\"value\"]) && flow.get(device+topic)[\"new\"] === true\n        data += \"\\n\"+group+\",host=\"+device+\" \"+topic+\"=\"+flow.get(device+topic)[\"value\"]+\" \"+timestamp;\n        flow.set(device+topic,undefined);//{\"value\":flow.get(device+topic)[\"value\"],\"new\":false});\n        //send = true;\n    }\nflow.set(device+\"Array\",[]);\n// String of most up-to-date sensor values seperated by new lines returned\nmsg.payload = data;\n\nif (msg.payload !== \"\")\n    return msg;","outputs":1,"noerr":0,"x":630,"y":220,"wires":[["cc3af0ea.2a7c9","3f38d671.ea838a","a063f274.1a5d8","387ce838.c40b08"]]},{"id":"f221c6dd.4f2208","type":"function","z":"df88dddf.9c8b7","name":"Set Topic to Datatype","func":"msg.toopic = msg.topic\n\n\ntypeDict = flow.get(\"typeDict\") || {}\nif (typeDict[msg.topic] === undefined) {\n    msg.topic = msg.path + msg.topic + \"/$datatype\";\n\n    return msg; }\n    \nunitDict = flow.get(\"unitDict\") || {}\nif (unitDict[msg.topic] === undefined) {\n    msg.topic = msg.path + msg.topic + \"/$unit\";\n    return msg; }\n    \nreturn null;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":120,"y":140,"wires":[["8db0975c.255e48","9648c415.bc2c78"]]},{"id":"dd5f357b.c5ea68","type":"http request","z":"df88dddf.9c8b7","name":"","method":"use","ret":"txt","paytoqs":true,"url":"","tls":"","proxy":"","authType":"","x":970,"y":120,"wires":[["659ec22b.503c2c"]]},{"id":"659ec22b.503c2c","type":"debug","z":"df88dddf.9c8b7","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":990,"y":160,"wires":[]},{"id":"cc3af0ea.2a7c9","type":"function","z":"df88dddf.9c8b7","name":"API Setup (QNAP00)","func":"// Last updated by Lachlan Magrath on 4/2/2021\n\ntoken = \"6K5r8FLBQWkzqYwtdmjObF_MkLMNHhKJjKptyhaXhTzYrEhh1IDYfGCXcBUSGxjR7L5PRUzCxBQ4sCQSj78vIw==\"; \naddress = \"http://10.0.0.211:19086/api/v2/write\";\norganisation = \"cypernex\";\nbucket = \"hi-res-24h\";\nprecision = \"ms\";\n\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = address+\"?org=\"+organisation+\"&bucket=\"+bucket+\"&precision=\"+precision;\nmsg.headers = {\"Authorization\" : \"Token \" + token}\n\n// 4/3/21. Suggested addition of timestamp. Remove timestamp field.\n// delete msg.timestamp;\n//msg.payload = \"cyper/ESP12S008/,host=host1 mcu/taskschedule05/period=60\";\n//msg.payload = \"testhead,host=host1 meat_percent=64.43234543 1556896326\";\n\nif (msg.measurement === undefined) return;\n\nif (msg.payload != [])\n    return msg;\n\nreturn;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":940,"y":80,"wires":[["dd5f357b.c5ea68"]]},{"id":"3f38d671.ea838a","type":"debug","z":"df88dddf.9c8b7","name":"Debug InfluxDB","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"payload","targetType":"msg","x":960,"y":200,"wires":[]},{"id":"387ce838.c40b08","type":"function","z":"df88dddf.9c8b7","name":"API Setup (QNAP00)","func":"// Last updated by Lachlan Magrath on 4/2/2021\n\ntoken = \"fENYSkgt5TS9Q0mQsSolV88OvwWKFoFGmdqKF4F2Bl0yVAABplhv7PJvQTNpuDIb8ZcfHCP1gitDBB8QOJcR4A==\"; \naddress = \"http://10.0.0.211:18086/api/v2/write\";\norganisation = \"cypernex\";\nbucket = \"cyperbucket\";\nprecision = \"ms\";\n\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = address+\"?org=\"+organisation+\"&bucket=\"+bucket+\"&precision=\"+precision;\nmsg.headers = {\"Authorization\" : \"Token \" + token}\n\n// 4/3/21. Suggested addition of timestamp. Remove timestamp field.\n// delete msg.timestamp;\n//msg.payload = \"cyper/ESP12S008/,host=host1 mcu/taskschedule05/period=60\";\n//msg.payload = \"testhead,host=host1 meat_percent=64.43234543 1556896326\";\n\nif (msg.measurement === undefined) return;\n\nif (msg.payload != [])\n    return msg;\n\nreturn;","outputs":1,"noerr":0,"x":940,"y":240,"wires":[["b76d1a7d.1dbf08"]]},{"id":"b76d1a7d.1dbf08","type":"http request","z":"df88dddf.9c8b7","name":"","method":"use","ret":"txt","paytoqs":true,"url":"","tls":"","proxy":"","authType":"","x":970,"y":280,"wires":[["eff738c1.dd2318"]]},{"id":"eff738c1.dd2318","type":"debug","z":"df88dddf.9c8b7","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"true","targetType":"full","x":990,"y":320,"wires":[]},{"id":"46b2939d.22869c","type":"function","z":"df88dddf.9c8b7","name":"Set reboots","func":"var topic = msg.topic;\n\n if (topic.includes(\"mcu/startingup\") && !topic.includes(\"$\") && msg.payload == \"1\") {\n    var varname = msg.path + \"reboots\";\n    flow.set(varname, {\"value\":1, \"uptime\": msg.payload});\n    \n    // Updates flow variable containing topics within current device\n    const deviceArray = flow.get(msg.path+\"Array\") || [];\n    if (!(deviceArray.includes(\"reboots\")))\n        deviceArray.push(\"reboots\");\n    flow.set(msg.path+\"Array\",deviceArray);\n    \n    return msg;\n}\n    \n\n\n\n\n\n\n\n\n\n","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":410,"y":280,"wires":[["bb2d6974.9be1c8"]]},{"id":"bb2d6974.9be1c8","type":"debug","z":"df88dddf.9c8b7","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":590,"y":360,"wires":[]},{"id":"69a395d6.87d6dc","type":"function","z":"df88dddf.9c8b7","name":"Hardcode Datatypes","func":"var typeDict = flow.get(\"typeDict\")\n\n// Add hardcoded datatypes here\ntypeDict[\"mcu/execlog\"] = \"String\";\n\nflow.set(\"typeDict\", typeDict);\nreturn msg;","outputs":1,"noerr":0,"x":320,"y":500,"wires":[[]]},{"id":"8db0975c.255e48","type":"debug","z":"df88dddf.9c8b7","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"topic","targetType":"msg","statusVal":"","statusType":"auto","x":190,"y":280,"wires":[]},{"id":"ca7cc4f2.e776c8","type":"function","z":"df88dddf.9c8b7","name":"","func":"if (msg.topic.includes(\"execlog\"))\n    return msg;","outputs":1,"noerr":0,"x":180,"y":360,"wires":[["ed9e0f0e.24523"]]},{"id":"ed9e0f0e.24523","type":"debug","z":"df88dddf.9c8b7","name":"","active":false,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","x":360,"y":380,"wires":[]},{"id":"9648c415.bc2c78","type":"digitaloak-mqtt-in","z":"df88dddf.9c8b7","name":"$datatype / $unit","qos":"2","datatype":"auto","unsubscribe-after-first-msg-recv":true,"broker":"a0a384b2.b52d18","x":190,"y":220,"wires":[["99e03f65.b7b77","1dc63e21.69d522"]]},{"id":"99e03f65.b7b77","type":"function","z":"df88dddf.9c8b7","name":"Split  & Update unitDict / typeDict","func":"// Authored by Martin Hannah & Michael Thompson\n// Last updated by Michael Thompson on 19/2/21\n// split the topic into two parts\nvar parts = msg.topic.split('/');\nvar topic = '';\nvar base = '';\nvar n    = 0;\nfor (var i of parts) {\n    if (n > 1) \n        topic = topic + i ;\n        if (i !== parts.length[i]) \n            topic = topic + '/';\n    n++;\n}\nbase = parts[0] + '/' + parts[1] + '/' ;\nmsg.path = base;\nmsg.topic = topic.substring(2,topic.length-1);\n\nif (msg.topic.includes(\"$unit\")) {\n    // Updates flow variable containing units for each topic\n    const unitDict = flow.get(\"unitDict\") || {};\n        // Assigns datatype to dict entry of topic name (ie without \"/$datatype\" suffix)\n    unitDict[msg.topic.substring(0, msg.topic.indexOf(\"/$unit\"))] = msg.payload;\n    flow.set(\"unitDict\", unitDict);\n}\n\nif (msg.topic.includes(\"$datatype\")) {\n// Updates flow variable containing datatypes for each topic\n    const typeDict = flow.get(\"typeDict\") || {};\n    // Assigns datatype to dict entry of topic name (ie without \"/$datatype\" suffix)\n    typeDict[msg.topic.substring(0, msg.topic.indexOf(\"/$datatype\"))] = msg.payload;\n    flow.set(\"typeDict\", typeDict);\n}\n\n\n\n\n\n\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":620,"y":500,"wires":[[]]},{"id":"1dc63e21.69d522","type":"debug","z":"df88dddf.9c8b7","name":"","active":true,"tosidebar":true,"console":false,"tostatus":false,"complete":"false","statusVal":"","statusType":"auto","x":460,"y":320,"wires":[]},{"id":"63bb5983.318d78","type":"inject","z":"df88dddf.9c8b7","name":"","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":false,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":90,"y":620,"wires":[[]]},{"id":"3252596a.22d116","type":"function","z":"df88dddf.9c8b7","name":"","func":"\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":350,"y":620,"wires":[[]]},{"id":"a0a384b2.b52d18","type":"mqtt-broker","name":"Homeassistant","broker":"10.0.0.228","port":"1883","clientid":"NodeRed_DEV","usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""}]
